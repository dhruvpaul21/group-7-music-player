import {
  derived,
  writable
} from "./chunk-LHDVAC2S.js";
import "./chunk-6A2TAOKG.js";
import {
  SvelteComponentDev,
  add_location,
  append_dev,
  assign,
  check_outros,
  component_subscribe,
  compute_rest_props,
  construct_svelte_component_dev,
  createEventDispatcher,
  create_component,
  create_slot,
  destroy_component,
  detach_dev,
  dispatch_dev,
  element,
  empty,
  exclude_internal_props,
  getContext,
  get_all_dirty_from_scope,
  get_slot_changes,
  get_spread_object,
  get_spread_update,
  get_store_value,
  group_outros,
  init,
  insert_dev,
  listen_dev,
  mount_component,
  onDestroy,
  onMount,
  safe_not_equal,
  setContext,
  set_attributes,
  set_data_dev,
  space,
  text,
  tick,
  transition_in,
  transition_out,
  update_slot_base,
  validate_slots,
  validate_store
} from "./chunk-DL5E2HPL.js";
import "./chunk-TWLJ45QX.js";

// node_modules/svelte-navigator/src/utils.js
var isUndefined = (value) => typeof value === "undefined";
var isFunction = (value) => typeof value === "function";
var isNumber = (value) => typeof value === "number";
function shouldNavigate(event) {
  return !event.defaultPrevented && event.button === 0 && !(event.metaKey || event.altKey || event.ctrlKey || event.shiftKey);
}
function createCounter() {
  let i = 0;
  return () => i++;
}
function createGlobalId() {
  return Math.random().toString(36).substring(2);
}
function findClosest(tagName, element2) {
  while (element2 && element2.tagName !== tagName) {
    element2 = element2.parentNode;
  }
  return element2;
}
var isSSR = typeof window === "undefined";
function addListener(target, type, handler) {
  target.addEventListener(type, handler);
  return () => target.removeEventListener(type, handler);
}
var createInlineStyle = (disableInlineStyles, style) => disableInlineStyles ? {} : { style };
var createMarkerProps = (disableInlineStyles) => ({
  "aria-hidden": "true",
  ...createInlineStyle(disableInlineStyles, "display:none;")
});

// node_modules/svelte-navigator/src/contexts.js
var createKey = (ctxName) => `@@svnav-ctx__${ctxName}`;
var LOCATION = createKey("LOCATION");
var ROUTER = createKey("ROUTER");
var ROUTE = createKey("ROUTE");
var ROUTE_PARAMS = createKey("ROUTE_PARAMS");
var FOCUS_ELEM = createKey("FOCUS_ELEM");

// node_modules/svelte-navigator/src/paths.js
var paramRegex = /^:(.+)/;
var substr = (str, start, end) => str.substr(start, end);
var startsWith = (string, search) => substr(string, 0, search.length) === search;
var isRootSegment = (segment) => segment === "";
var isDynamic = (segment) => paramRegex.test(segment);
var isSplat = (segment) => segment[0] === "*";
var stripSplat = (str) => str.replace(/\*.*$/, "");
var stripSlashes = (str) => str.replace(/(^\/+|\/+$)/g, "");
function segmentize(uri, filterFalsy = false) {
  const segments = stripSlashes(uri).split("/");
  return filterFalsy ? segments.filter(Boolean) : segments;
}
var addQuery = (pathname, query2) => pathname + (query2 ? `?${query2}` : "");
var normalizePath = (path) => `/${stripSlashes(path)}`;
function join(...pathFragments) {
  const joinFragment = (fragment) => segmentize(fragment, true).join("/");
  const joinedSegments = pathFragments.map(joinFragment).join("/");
  return normalizePath(joinedSegments);
}

// node_modules/svelte-navigator/src/warning.js
var LINK_ID = 1;
var ROUTE_ID = 2;
var ROUTER_ID = 3;
var USE_FOCUS_ID = 4;
var USE_LOCATION_ID = 5;
var USE_MATCH_ID = 6;
var USE_NAVIGATE_ID = 7;
var USE_PARAMS_ID = 8;
var USE_RESOLVABLE_ID = 9;
var USE_RESOLVE_ID = 10;
var NAVIGATE_ID = 11;
var labels = {
  [LINK_ID]: "Link",
  [ROUTE_ID]: "Route",
  [ROUTER_ID]: "Router",
  [USE_FOCUS_ID]: "useFocus",
  [USE_LOCATION_ID]: "useLocation",
  [USE_MATCH_ID]: "useMatch",
  [USE_NAVIGATE_ID]: "useNavigate",
  [USE_PARAMS_ID]: "useParams",
  [USE_RESOLVABLE_ID]: "useResolvable",
  [USE_RESOLVE_ID]: "useResolve",
  [NAVIGATE_ID]: "navigate"
};
var createLabel = (labelId) => labels[labelId];
function createIdentifier(labelId, props) {
  let attr;
  if (labelId === ROUTE_ID) {
    attr = props.path ? `path="${props.path}"` : "default";
  } else if (labelId === LINK_ID) {
    attr = `to="${props.to}"`;
  } else if (labelId === ROUTER_ID) {
    attr = `basepath="${props.basepath || ""}"`;
  }
  return `<${createLabel(labelId)} ${attr || ""} />`;
}
function createMessage(labelId, message, props, originId) {
  const origin = props && createIdentifier(originId || labelId, props);
  const originMsg = origin ? `

Occurred in: ${origin}` : "";
  const label = createLabel(labelId);
  const msg = isFunction(message) ? message(label) : message;
  return `<${label}> ${msg}${originMsg}`;
}
var createMessageHandler = (handler) => (...args) => handler(createMessage(...args));
var fail = createMessageHandler((message) => {
  throw new Error(message);
});
var warn = createMessageHandler(console.warn);

// node_modules/svelte-navigator/src/routes.js
var SEGMENT_POINTS = 4;
var STATIC_POINTS = 3;
var DYNAMIC_POINTS = 2;
var SPLAT_PENALTY = 1;
var ROOT_POINTS = 1;
function rankRoute(route, index) {
  const score = route.default ? 0 : segmentize(route.fullPath).reduce((acc, segment) => {
    let nextScore = acc;
    nextScore += SEGMENT_POINTS;
    if (isRootSegment(segment)) {
      nextScore += ROOT_POINTS;
    } else if (isDynamic(segment)) {
      nextScore += DYNAMIC_POINTS;
    } else if (isSplat(segment)) {
      nextScore -= SEGMENT_POINTS + SPLAT_PENALTY;
    } else {
      nextScore += STATIC_POINTS;
    }
    return nextScore;
  }, 0);
  return { route, score, index };
}
function rankRoutes(routes) {
  return routes.map(rankRoute).sort((a, b) => {
    if (a.score < b.score) {
      return 1;
    }
    if (a.score > b.score) {
      return -1;
    }
    return a.index - b.index;
  });
}
function pick(routes, uri) {
  let bestMatch;
  let defaultMatch;
  const [uriPathname] = uri.split("?");
  const uriSegments = segmentize(uriPathname);
  const isRootUri = uriSegments[0] === "";
  const ranked = rankRoutes(routes);
  for (let i = 0, l = ranked.length; i < l; i++) {
    const { route } = ranked[i];
    let missed = false;
    const params = {};
    const createMatch = (uri2) => ({ ...route, params, uri: uri2 });
    if (route.default) {
      defaultMatch = createMatch(uri);
      continue;
    }
    const routeSegments = segmentize(route.fullPath);
    const max = Math.max(uriSegments.length, routeSegments.length);
    let index = 0;
    for (; index < max; index++) {
      const routeSegment = routeSegments[index];
      const uriSegment = uriSegments[index];
      if (!isUndefined(routeSegment) && isSplat(routeSegment)) {
        const splatName = routeSegment === "*" ? "*" : routeSegment.slice(1);
        params[splatName] = uriSegments.slice(index).map(decodeURIComponent).join("/");
        break;
      }
      if (isUndefined(uriSegment)) {
        missed = true;
        break;
      }
      const dynamicMatch = paramRegex.exec(routeSegment);
      if (dynamicMatch && !isRootUri) {
        const value = decodeURIComponent(uriSegment);
        params[dynamicMatch[1]] = value;
      } else if (routeSegment !== uriSegment) {
        missed = true;
        break;
      }
    }
    if (!missed) {
      bestMatch = createMatch(join(...uriSegments.slice(0, index)));
      break;
    }
  }
  return bestMatch || defaultMatch || null;
}
function match(route, uri) {
  return pick([route], uri);
}
function resolve(to, base) {
  if (startsWith(to, "/")) {
    return to;
  }
  const [toPathname, toQuery] = to.split("?");
  const [basePathname] = base.split("?");
  const toSegments = segmentize(toPathname);
  const baseSegments = segmentize(basePathname);
  if (toSegments[0] === "") {
    return addQuery(basePathname, toQuery);
  }
  if (!startsWith(toSegments[0], ".")) {
    const pathname = baseSegments.concat(toSegments).join("/");
    return addQuery((basePathname === "/" ? "" : "/") + pathname, toQuery);
  }
  const allSegments = baseSegments.concat(toSegments);
  const segments = [];
  allSegments.forEach((segment) => {
    if (segment === "..") {
      segments.pop();
    } else if (segment !== ".") {
      segments.push(segment);
    }
  });
  return addQuery(`/${segments.join("/")}`, toQuery);
}
function normalizeLocation(location, basepath) {
  const { pathname, hash = "", search = "", state } = location;
  const baseSegments = segmentize(basepath, true);
  const pathSegments = segmentize(pathname, true);
  while (baseSegments.length) {
    if (baseSegments[0] !== pathSegments[0]) {
      fail(
        ROUTER_ID,
        `Invalid state: All locations must begin with the basepath "${basepath}", found "${pathname}"`
      );
    }
    baseSegments.shift();
    pathSegments.shift();
  }
  return {
    pathname: join(...pathSegments),
    hash,
    search,
    state
  };
}
var normalizeUrlFragment = (frag) => frag.length === 1 ? "" : frag;
var parsePath = (path) => {
  const searchIndex = path.indexOf("?");
  const hashIndex = path.indexOf("#");
  const hasSearchIndex = searchIndex !== -1;
  const hasHashIndex = hashIndex !== -1;
  const hash = hasHashIndex ? normalizeUrlFragment(substr(path, hashIndex)) : "";
  const pathnameAndSearch = hasHashIndex ? substr(path, 0, hashIndex) : path;
  const search = hasSearchIndex ? normalizeUrlFragment(substr(pathnameAndSearch, searchIndex)) : "";
  const pathname = (hasSearchIndex ? substr(pathnameAndSearch, 0, searchIndex) : pathnameAndSearch) || "/";
  return { pathname, search, hash };
};
var stringifyPath = (location) => {
  const { pathname, search, hash } = location;
  return pathname + search + hash;
};
function resolveLink(path, routeBase, appBase) {
  return join(appBase, resolve(path, routeBase));
}
function extractBaseUri(routePath, pathname) {
  const fullPath = normalizePath(stripSplat(routePath));
  const baseSegments = segmentize(fullPath, true);
  const pathSegments = segmentize(pathname, true).slice(0, baseSegments.length);
  const routeMatch = match({ fullPath }, join(...pathSegments));
  return routeMatch && routeMatch.uri;
}

// node_modules/svelte-navigator/src/history.js
var POP = "POP";
var PUSH = "PUSH";
var REPLACE = "REPLACE";
function getLocation(source) {
  return {
    ...source.location,
    pathname: encodeURI(decodeURI(source.location.pathname)),
    state: source.history.state,
    _key: source.history.state && source.history.state._key || "initial"
  };
}
function createHistory(source) {
  let listeners = [];
  let location = getLocation(source);
  let action = POP;
  const notifyListeners = (listenerFns = listeners) => listenerFns.forEach((listener) => listener({ location, action }));
  return {
    get location() {
      return location;
    },
    listen(listener) {
      listeners.push(listener);
      const popstateListener = () => {
        location = getLocation(source);
        action = POP;
        notifyListeners([listener]);
      };
      notifyListeners([listener]);
      const unlisten = addListener(source, "popstate", popstateListener);
      return () => {
        unlisten();
        listeners = listeners.filter((fn) => fn !== listener);
      };
    },
    navigate(to, options) {
      const { state = {}, replace = false } = options || {};
      action = replace ? REPLACE : PUSH;
      if (isNumber(to)) {
        if (options) {
          warn(
            NAVIGATE_ID,
            "Navigation options (state or replace) are not supported, when passing a number as the first argument to navigate. They are ignored."
          );
        }
        action = POP;
        source.history.go(to);
      } else {
        const keyedState = { ...state, _key: createGlobalId() };
        try {
          source.history[replace ? "replaceState" : "pushState"](
            keyedState,
            "",
            to
          );
        } catch (e) {
          source.location[replace ? "replace" : "assign"](to);
        }
      }
      location = getLocation(source);
      notifyListeners();
    }
  };
}
function createStackFrame(state, uri) {
  return { ...parsePath(uri), state };
}
function createMemorySource(initialPathname = "/") {
  let index = 0;
  let stack = [createStackFrame(null, initialPathname)];
  return {
    get entries() {
      return stack;
    },
    get location() {
      return stack[index];
    },
    addEventListener() {
    },
    removeEventListener() {
    },
    history: {
      get state() {
        return stack[index].state;
      },
      pushState(state, title, uri) {
        index++;
        stack = stack.slice(0, index);
        stack.push(createStackFrame(state, uri));
      },
      replaceState(state, title, uri) {
        stack[index] = createStackFrame(state, uri);
      },
      go(to) {
        const newIndex = index + to;
        if (newIndex < 0 || newIndex > stack.length - 1) {
          return;
        }
        index = newIndex;
      }
    }
  };
}
var canUseDOM = !!(!isSSR && window.document && window.document.createElement);
var isEmbeddedPage = !isSSR && window.location.origin === "null";
var globalHistory = createHistory(
  canUseDOM && !isEmbeddedPage ? window : createMemorySource()
);
var { navigate } = globalHistory;

// node_modules/svelte-navigator/src/a11y.js
var focusCandidate = null;
var initialNavigation = true;
function isAbove(routerIdA, routerIdB) {
  const routerMarkers = document.querySelectorAll("[data-svnav-router]");
  for (let i = 0; i < routerMarkers.length; i++) {
    const node = routerMarkers[i];
    const currentId = Number(node.dataset.svnavRouter);
    if (currentId === routerIdA)
      return true;
    if (currentId === routerIdB)
      return false;
  }
  return false;
}
function pushFocusCandidate(item) {
  if (!focusCandidate || item.level > focusCandidate.level || item.level === focusCandidate.level && isAbove(item.routerId, focusCandidate.routerId)) {
    focusCandidate = item;
  }
}
function clearFocusCandidate() {
  focusCandidate = null;
}
function initialNavigationOccurred() {
  initialNavigation = false;
}
function focus(elem) {
  if (!elem)
    return false;
  const TABINDEX = "tabindex";
  try {
    if (!elem.hasAttribute(TABINDEX)) {
      elem.setAttribute(TABINDEX, "-1");
      let unlisten;
      const blurListener = () => {
        elem.removeAttribute(TABINDEX);
        unlisten();
      };
      unlisten = addListener(elem, "blur", blurListener);
    }
    elem.focus();
    return document.activeElement === elem;
  } catch (e) {
    return false;
  }
}
function isEndMarker(elem, id) {
  return Number(elem.dataset.svnavRouteEnd) === id;
}
function isHeading(elem) {
  return /^H[1-6]$/i.test(elem.tagName);
}
function query(selector, parent = document) {
  return parent.querySelector(selector);
}
function queryHeading(id) {
  const marker = query(`[data-svnav-route-start="${id}"]`);
  let current = marker.nextElementSibling;
  while (!isEndMarker(current, id)) {
    if (isHeading(current)) {
      return current;
    }
    const heading = query("h1,h2,h3,h4,h5,h6", current);
    if (heading) {
      return heading;
    }
    current = current.nextElementSibling;
  }
  return null;
}
function handleFocus(route) {
  Promise.resolve(get_store_value(route.focusElement)).then((elem) => {
    const focusElement = elem || queryHeading(route.id);
    if (!focusElement) {
      warn(
        ROUTER_ID,
        `Could not find an element to focus. You should always render a header for accessibility reasons, or set a custom focus element via the "useFocus" hook. If you don't want this Route or Router to manage focus, pass "primary={false}" to it.`,
        route,
        ROUTE_ID
      );
    }
    const headingFocused = focus(focusElement);
    if (headingFocused)
      return;
    focus(document.documentElement);
  });
}
var createTriggerFocus = (a11yConfig, announcementText, location) => (manageFocus, announceNavigation) => tick().then(() => {
  if (!focusCandidate || initialNavigation) {
    initialNavigationOccurred();
    return;
  }
  if (manageFocus) {
    handleFocus(focusCandidate.route);
  }
  if (a11yConfig.announcements && announceNavigation) {
    const { path, fullPath, meta, params, uri } = focusCandidate.route;
    const announcementMessage = a11yConfig.createAnnouncement(
      { path, fullPath, meta, params, uri },
      get_store_value(location)
    );
    Promise.resolve(announcementMessage).then((message) => {
      announcementText.set(message);
    });
  }
  clearFocusCandidate();
});
var visuallyHiddenStyle = "position:fixed;top:-1px;left:0;width:1px;height:1px;padding:0;overflow:hidden;clip:rect(0,0,0,0);white-space:nowrap;border:0;";

// node_modules/svelte-navigator/src/Router.svelte
var file = "node_modules\\svelte-navigator\\src\\Router.svelte";
function create_if_block(ctx) {
  let div;
  let t;
  let div_levels = [
    { role: "status" },
    { "aria-atomic": "true" },
    { "aria-live": "polite" },
    { "data-svnav-announcer": "" },
    createInlineStyle(ctx[6], visuallyHiddenStyle)
  ];
  let div_data = {};
  for (let i = 0; i < div_levels.length; i += 1) {
    div_data = assign(div_data, div_levels[i]);
  }
  const block = {
    c: function create() {
      div = element("div");
      t = text(ctx[0]);
      set_attributes(div, div_data);
      add_location(div, file, 204, 1, 6353);
    },
    m: function mount(target, anchor) {
      insert_dev(target, div, anchor);
      append_dev(div, t);
    },
    p: function update(ctx2, dirty) {
      if (dirty[0] & 1)
        set_data_dev(t, ctx2[0]);
      set_attributes(div, div_data = get_spread_update(div_levels, [
        { role: "status" },
        { "aria-atomic": "true" },
        { "aria-live": "polite" },
        { "data-svnav-announcer": "" },
        createInlineStyle(ctx2[6], visuallyHiddenStyle)
      ]));
    },
    d: function destroy(detaching) {
      if (detaching)
        detach_dev(div);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_if_block.name,
    type: "if",
    source: "(204:0) {#if isTopLevelRouter && manageFocus && a11yConfig.announcements}",
    ctx
  });
  return block;
}
function create_fragment(ctx) {
  let div;
  let t0;
  let t1;
  let if_block_anchor;
  let current;
  let div_levels = [
    createMarkerProps(ctx[6]),
    { "data-svnav-router": ctx[3] }
  ];
  let div_data = {};
  for (let i = 0; i < div_levels.length; i += 1) {
    div_data = assign(div_data, div_levels[i]);
  }
  const default_slot_template = ctx[22].default;
  const default_slot = create_slot(default_slot_template, ctx, ctx[21], null);
  let if_block = ctx[2] && ctx[4] && ctx[1].announcements && create_if_block(ctx);
  const block = {
    c: function create() {
      div = element("div");
      t0 = space();
      if (default_slot)
        default_slot.c();
      t1 = space();
      if (if_block)
        if_block.c();
      if_block_anchor = empty();
      set_attributes(div, div_data);
      add_location(div, file, 196, 0, 6178);
    },
    l: function claim(nodes) {
      throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    },
    m: function mount(target, anchor) {
      insert_dev(target, div, anchor);
      insert_dev(target, t0, anchor);
      if (default_slot) {
        default_slot.m(target, anchor);
      }
      insert_dev(target, t1, anchor);
      if (if_block)
        if_block.m(target, anchor);
      insert_dev(target, if_block_anchor, anchor);
      current = true;
    },
    p: function update(ctx2, dirty) {
      set_attributes(div, div_data = get_spread_update(div_levels, [
        createMarkerProps(ctx2[6]),
        { "data-svnav-router": ctx2[3] }
      ]));
      if (default_slot) {
        if (default_slot.p && (!current || dirty[0] & 2097152)) {
          update_slot_base(
            default_slot,
            default_slot_template,
            ctx2,
            ctx2[21],
            !current ? get_all_dirty_from_scope(ctx2[21]) : get_slot_changes(default_slot_template, ctx2[21], dirty, null),
            null
          );
        }
      }
      if (ctx2[2] && ctx2[4] && ctx2[1].announcements)
        if_block.p(ctx2, dirty);
    },
    i: function intro(local) {
      if (current)
        return;
      transition_in(default_slot, local);
      current = true;
    },
    o: function outro(local) {
      transition_out(default_slot, local);
      current = false;
    },
    d: function destroy(detaching) {
      if (detaching)
        detach_dev(div);
      if (detaching)
        detach_dev(t0);
      if (default_slot)
        default_slot.d(detaching);
      if (detaching)
        detach_dev(t1);
      if (if_block)
        if_block.d(detaching);
      if (detaching)
        detach_dev(if_block_anchor);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_fragment.name,
    type: "component",
    source: "",
    ctx
  });
  return block;
}
var createId = createCounter();
var defaultBasepath = "/";
function instance($$self, $$props, $$invalidate) {
  let $location;
  let $activeRoute;
  let $prevLocation;
  let $routes;
  let $announcementText;
  let { $$slots: slots = {}, $$scope } = $$props;
  validate_slots("Router", slots, ["default"]);
  let { basepath = defaultBasepath } = $$props;
  let { url = null } = $$props;
  let { history = globalHistory } = $$props;
  let { primary = true } = $$props;
  let { a11y = {} } = $$props;
  let { disableInlineStyles = false } = $$props;
  const a11yConfig = {
    createAnnouncement: (route) => `Navigated to ${route.uri}`,
    announcements: true,
    ...a11y
  };
  const initialBasepath = basepath;
  const normalizedBasepath = normalizePath(basepath);
  const locationContext = getContext(LOCATION);
  const routerContext = getContext(ROUTER);
  const isTopLevelRouter = !locationContext;
  const routerId = createId();
  const manageFocus = primary && !(routerContext && !routerContext.manageFocus);
  const announcementText = writable("");
  validate_store(announcementText, "announcementText");
  component_subscribe($$self, announcementText, (value) => $$invalidate(0, $announcementText = value));
  const shouldDisableInlineStyles = routerContext ? routerContext.disableInlineStyles : disableInlineStyles;
  const routes = writable([]);
  validate_store(routes, "routes");
  component_subscribe($$self, routes, (value) => $$invalidate(20, $routes = value));
  const activeRoute = writable(null);
  validate_store(activeRoute, "activeRoute");
  component_subscribe($$self, activeRoute, (value) => $$invalidate(18, $activeRoute = value));
  let hasActiveRoute = false;
  const level = isTopLevelRouter ? 0 : routerContext.level + 1;
  const getInitialLocation = () => normalizeLocation(isSSR ? parsePath(url) : history.location, normalizedBasepath);
  const location = isTopLevelRouter ? writable(getInitialLocation()) : locationContext;
  validate_store(location, "location");
  component_subscribe($$self, location, (value) => $$invalidate(17, $location = value));
  const prevLocation = writable($location);
  validate_store(prevLocation, "prevLocation");
  component_subscribe($$self, prevLocation, (value) => $$invalidate(19, $prevLocation = value));
  const triggerFocus = createTriggerFocus(a11yConfig, announcementText, location);
  const createRouteFilter = (routeId) => (routeList) => routeList.filter((routeItem) => routeItem.id !== routeId);
  function registerRoute(route) {
    if (isSSR) {
      if (hasActiveRoute) {
        return;
      }
      const matchingRoute = match(route, $location.pathname);
      if (matchingRoute) {
        hasActiveRoute = true;
        return matchingRoute;
      }
    } else {
      routes.update((prevRoutes) => {
        const nextRoutes = createRouteFilter(route.id)(prevRoutes);
        nextRoutes.push(route);
        return nextRoutes;
      });
    }
  }
  function unregisterRoute(routeId) {
    routes.update(createRouteFilter(routeId));
  }
  if (!isTopLevelRouter && basepath !== defaultBasepath) {
    warn(ROUTER_ID, 'Only top-level Routers can have a "basepath" prop. It is ignored.', { basepath });
  }
  if (isTopLevelRouter) {
    onMount(() => {
      const unlisten = history.listen((changedHistory) => {
        const normalizedLocation = normalizeLocation(changedHistory.location, normalizedBasepath);
        prevLocation.set($location);
        location.set(normalizedLocation);
      });
      return unlisten;
    });
    setContext(LOCATION, location);
  }
  setContext(ROUTER, {
    activeRoute,
    registerRoute,
    unregisterRoute,
    manageFocus,
    level,
    id: routerId,
    history: isTopLevelRouter ? history : routerContext.history,
    basepath: isTopLevelRouter ? normalizedBasepath : routerContext.basepath,
    disableInlineStyles: shouldDisableInlineStyles
  });
  const writable_props = ["basepath", "url", "history", "primary", "a11y", "disableInlineStyles"];
  Object.keys($$props).forEach((key) => {
    if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$" && key !== "slot")
      console.warn(`<Router> was created with unknown prop '${key}'`);
  });
  $$self.$$set = ($$props2) => {
    if ("basepath" in $$props2)
      $$invalidate(11, basepath = $$props2.basepath);
    if ("url" in $$props2)
      $$invalidate(12, url = $$props2.url);
    if ("history" in $$props2)
      $$invalidate(13, history = $$props2.history);
    if ("primary" in $$props2)
      $$invalidate(14, primary = $$props2.primary);
    if ("a11y" in $$props2)
      $$invalidate(15, a11y = $$props2.a11y);
    if ("disableInlineStyles" in $$props2)
      $$invalidate(16, disableInlineStyles = $$props2.disableInlineStyles);
    if ("$$scope" in $$props2)
      $$invalidate(21, $$scope = $$props2.$$scope);
  };
  $$self.$capture_state = () => ({
    createCounter,
    createInlineStyle,
    createMarkerProps,
    createId,
    getContext,
    setContext,
    onMount,
    writable,
    LOCATION,
    ROUTER,
    globalHistory,
    normalizePath,
    pick,
    match,
    normalizeLocation,
    parsePath,
    isSSR,
    warn,
    ROUTER_ID,
    pushFocusCandidate,
    visuallyHiddenStyle,
    createTriggerFocus,
    defaultBasepath,
    basepath,
    url,
    history,
    primary,
    a11y,
    disableInlineStyles,
    a11yConfig,
    initialBasepath,
    normalizedBasepath,
    locationContext,
    routerContext,
    isTopLevelRouter,
    routerId,
    manageFocus,
    announcementText,
    shouldDisableInlineStyles,
    routes,
    activeRoute,
    hasActiveRoute,
    level,
    getInitialLocation,
    location,
    prevLocation,
    triggerFocus,
    createRouteFilter,
    registerRoute,
    unregisterRoute,
    $location,
    $activeRoute,
    $prevLocation,
    $routes,
    $announcementText
  });
  $$self.$inject_state = ($$props2) => {
    if ("basepath" in $$props2)
      $$invalidate(11, basepath = $$props2.basepath);
    if ("url" in $$props2)
      $$invalidate(12, url = $$props2.url);
    if ("history" in $$props2)
      $$invalidate(13, history = $$props2.history);
    if ("primary" in $$props2)
      $$invalidate(14, primary = $$props2.primary);
    if ("a11y" in $$props2)
      $$invalidate(15, a11y = $$props2.a11y);
    if ("disableInlineStyles" in $$props2)
      $$invalidate(16, disableInlineStyles = $$props2.disableInlineStyles);
    if ("hasActiveRoute" in $$props2)
      hasActiveRoute = $$props2.hasActiveRoute;
  };
  if ($$props && "$$inject" in $$props) {
    $$self.$inject_state($$props.$$inject);
  }
  $$self.$$.update = () => {
    if ($$self.$$.dirty[0] & 2048) {
      $:
        if (basepath !== initialBasepath) {
          warn(ROUTER_ID, 'You cannot change the "basepath" prop. It is ignored.');
        }
    }
    if ($$self.$$.dirty[0] & 1179648) {
      $: {
        const bestMatch = pick($routes, $location.pathname);
        activeRoute.set(bestMatch);
      }
    }
    if ($$self.$$.dirty[0] & 655360) {
      $: {
        if (isTopLevelRouter) {
          const hasHash = !!$location.hash;
          const shouldManageFocus = !hasHash && manageFocus;
          const announceNavigation = !hasHash || $location.pathname !== $prevLocation.pathname;
          triggerFocus(shouldManageFocus, announceNavigation);
        }
      }
    }
    if ($$self.$$.dirty[0] & 262144) {
      $:
        if (manageFocus && $activeRoute && $activeRoute.primary) {
          pushFocusCandidate({ level, routerId, route: $activeRoute });
        }
    }
  };
  return [
    $announcementText,
    a11yConfig,
    isTopLevelRouter,
    routerId,
    manageFocus,
    announcementText,
    shouldDisableInlineStyles,
    routes,
    activeRoute,
    location,
    prevLocation,
    basepath,
    url,
    history,
    primary,
    a11y,
    disableInlineStyles,
    $location,
    $activeRoute,
    $prevLocation,
    $routes,
    $$scope,
    slots
  ];
}
var Router = class extends SvelteComponentDev {
  constructor(options) {
    super(options);
    init(
      this,
      options,
      instance,
      create_fragment,
      safe_not_equal,
      {
        basepath: 11,
        url: 12,
        history: 13,
        primary: 14,
        a11y: 15,
        disableInlineStyles: 16
      },
      null,
      [-1, -1]
    );
    dispatch_dev("SvelteRegisterComponent", {
      component: this,
      tagName: "Router",
      options,
      id: create_fragment.name
    });
  }
  get basepath() {
    throw new Error("<Router>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set basepath(value) {
    throw new Error("<Router>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get url() {
    throw new Error("<Router>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set url(value) {
    throw new Error("<Router>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get history() {
    throw new Error("<Router>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set history(value) {
    throw new Error("<Router>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get primary() {
    throw new Error("<Router>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set primary(value) {
    throw new Error("<Router>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get a11y() {
    throw new Error("<Router>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set a11y(value) {
    throw new Error("<Router>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get disableInlineStyles() {
    throw new Error("<Router>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set disableInlineStyles(value) {
    throw new Error("<Router>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
};
var Router_default = Router;

// node_modules/svelte-navigator/src/hooks.js
function usePreflightCheck(componentId, props, ctxKey = ROUTER, ctxProviderId = ROUTER_ID) {
  const ctx = getContext(ctxKey);
  if (!ctx) {
    fail(
      componentId,
      (label) => `You cannot use ${label} outside of a ${createLabel(ctxProviderId)}.`,
      props
    );
  }
}
var toReadonly = (ctx) => {
  const { subscribe } = getContext(ctx);
  return { subscribe };
};
function useLocation() {
  usePreflightCheck(USE_LOCATION_ID);
  return toReadonly(LOCATION);
}
function useHistory() {
  const { history } = getContext(ROUTER);
  return history;
}
function useRouteBase() {
  const route = getContext(ROUTE);
  return route ? derived(route, (_route) => _route.base) : writable("/");
}
function useResolve() {
  usePreflightCheck(USE_RESOLVE_ID);
  const routeBase = useRouteBase();
  const { basepath: appBase } = getContext(ROUTER);
  const resolve2 = (path) => resolveLink(path, get_store_value(routeBase), appBase);
  return resolve2;
}
function useResolvable(path) {
  usePreflightCheck(USE_RESOLVABLE_ID);
  const routeBase = useRouteBase();
  const { basepath: appBase } = getContext(ROUTER);
  return derived(
    routeBase,
    (_routeBase) => resolveLink(path, _routeBase, appBase)
  );
}
function useNavigate() {
  usePreflightCheck(USE_NAVIGATE_ID);
  const resolve2 = useResolve();
  const { navigate: navigate2 } = useHistory();
  const navigateRelative = (to, options) => {
    const target = isNumber(to) ? to : resolve2(to);
    return navigate2(target, options);
  };
  return navigateRelative;
}
function useMatch(path) {
  usePreflightCheck(USE_MATCH_ID);
  const location = useLocation();
  const resolve2 = useResolve();
  const { basepath: appBase } = getContext(ROUTER);
  const resolvedPath = resolve2(path);
  const { pathname: fullPath } = normalizeLocation(
    { pathname: resolvedPath },
    appBase
  );
  return derived(location, (loc) => match({ fullPath, path }, loc.pathname));
}
function useParams() {
  usePreflightCheck(USE_PARAMS_ID, null, ROUTE, ROUTE_ID);
  return toReadonly(ROUTE_PARAMS);
}
function useFocus() {
  usePreflightCheck(USE_FOCUS_ID, null, ROUTE, ROUTE_ID);
  const location = useLocation();
  const focusElement = getContext(FOCUS_ELEM);
  let resolve2;
  const unsubscribe = location.subscribe(() => {
    const lazyElement = new Promise((_resolve) => {
      resolve2 = _resolve;
    });
    focusElement.set(lazyElement);
  });
  onDestroy(unsubscribe);
  return (node) => {
    let unmounted = false;
    const innerUnsubscribe = location.subscribe(() => {
      tick().then(() => {
        if (!unmounted) {
          resolve2(node);
        }
      });
    });
    return {
      destroy() {
        unmounted = true;
        innerUnsubscribe();
      }
    };
  };
}

// node_modules/svelte-navigator/src/Route.svelte
var file2 = "node_modules\\svelte-navigator\\src\\Route.svelte";
var get_default_slot_changes = (dirty) => ({
  params: dirty & 16,
  location: dirty & 8
});
var get_default_slot_context = (ctx) => ({
  params: isSSR ? get_store_value(ctx[10]) : ctx[4],
  location: ctx[3],
  navigate: ctx[11]
});
function create_if_block2(ctx) {
  let router;
  let current;
  router = new Router_default({
    props: {
      primary: ctx[1],
      $$slots: { default: [create_default_slot] },
      $$scope: { ctx }
    },
    $$inline: true
  });
  const block = {
    c: function create() {
      create_component(router.$$.fragment);
    },
    m: function mount(target, anchor) {
      mount_component(router, target, anchor);
      current = true;
    },
    p: function update(ctx2, dirty) {
      const router_changes = {};
      if (dirty & 2)
        router_changes.primary = ctx2[1];
      if (dirty & 528409) {
        router_changes.$$scope = { dirty, ctx: ctx2 };
      }
      router.$set(router_changes);
    },
    i: function intro(local) {
      if (current)
        return;
      transition_in(router.$$.fragment, local);
      current = true;
    },
    o: function outro(local) {
      transition_out(router.$$.fragment, local);
      current = false;
    },
    d: function destroy(detaching) {
      destroy_component(router, detaching);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_if_block2.name,
    type: "if",
    source: "(98:0) {#if isActive}",
    ctx
  });
  return block;
}
function create_else_block(ctx) {
  let current;
  const default_slot_template = ctx[18].default;
  const default_slot = create_slot(default_slot_template, ctx, ctx[19], get_default_slot_context);
  const block = {
    c: function create() {
      if (default_slot)
        default_slot.c();
    },
    m: function mount(target, anchor) {
      if (default_slot) {
        default_slot.m(target, anchor);
      }
      current = true;
    },
    p: function update(ctx2, dirty) {
      if (default_slot) {
        if (default_slot.p && (!current || dirty & 524312)) {
          update_slot_base(
            default_slot,
            default_slot_template,
            ctx2,
            ctx2[19],
            !current ? get_all_dirty_from_scope(ctx2[19]) : get_slot_changes(default_slot_template, ctx2[19], dirty, get_default_slot_changes),
            get_default_slot_context
          );
        }
      }
    },
    i: function intro(local) {
      if (current)
        return;
      transition_in(default_slot, local);
      current = true;
    },
    o: function outro(local) {
      transition_out(default_slot, local);
      current = false;
    },
    d: function destroy(detaching) {
      if (default_slot)
        default_slot.d(detaching);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_else_block.name,
    type: "else",
    source: "(114:2) {:else}",
    ctx
  });
  return block;
}
function create_if_block_1(ctx) {
  let switch_instance;
  let switch_instance_anchor;
  let current;
  const switch_instance_spread_levels = [
    { location: ctx[3] },
    { navigate: ctx[11] },
    isSSR ? get_store_value(ctx[10]) : ctx[4],
    ctx[12]
  ];
  var switch_value = ctx[0];
  function switch_props(ctx2) {
    let switch_instance_props = {};
    for (let i = 0; i < switch_instance_spread_levels.length; i += 1) {
      switch_instance_props = assign(switch_instance_props, switch_instance_spread_levels[i]);
    }
    return {
      props: switch_instance_props,
      $$inline: true
    };
  }
  if (switch_value) {
    switch_instance = construct_svelte_component_dev(switch_value, switch_props(ctx));
  }
  const block = {
    c: function create() {
      if (switch_instance)
        create_component(switch_instance.$$.fragment);
      switch_instance_anchor = empty();
    },
    m: function mount(target, anchor) {
      if (switch_instance)
        mount_component(switch_instance, target, anchor);
      insert_dev(target, switch_instance_anchor, anchor);
      current = true;
    },
    p: function update(ctx2, dirty) {
      const switch_instance_changes = dirty & 7192 ? get_spread_update(switch_instance_spread_levels, [
        dirty & 8 && { location: ctx2[3] },
        dirty & 2048 && { navigate: ctx2[11] },
        dirty & 1040 && get_spread_object(isSSR ? get_store_value(ctx2[10]) : ctx2[4]),
        dirty & 4096 && get_spread_object(ctx2[12])
      ]) : {};
      if (switch_value !== (switch_value = ctx2[0])) {
        if (switch_instance) {
          group_outros();
          const old_component = switch_instance;
          transition_out(old_component.$$.fragment, 1, 0, () => {
            destroy_component(old_component, 1);
          });
          check_outros();
        }
        if (switch_value) {
          switch_instance = construct_svelte_component_dev(switch_value, switch_props(ctx2));
          create_component(switch_instance.$$.fragment);
          transition_in(switch_instance.$$.fragment, 1);
          mount_component(switch_instance, switch_instance_anchor.parentNode, switch_instance_anchor);
        } else {
          switch_instance = null;
        }
      } else if (switch_value) {
        switch_instance.$set(switch_instance_changes);
      }
    },
    i: function intro(local) {
      if (current)
        return;
      if (switch_instance)
        transition_in(switch_instance.$$.fragment, local);
      current = true;
    },
    o: function outro(local) {
      if (switch_instance)
        transition_out(switch_instance.$$.fragment, local);
      current = false;
    },
    d: function destroy(detaching) {
      if (detaching)
        detach_dev(switch_instance_anchor);
      if (switch_instance)
        destroy_component(switch_instance, detaching);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_if_block_1.name,
    type: "if",
    source: "(106:2) {#if component !== null}",
    ctx
  });
  return block;
}
function create_default_slot(ctx) {
  let current_block_type_index;
  let if_block;
  let if_block_anchor;
  let current;
  const if_block_creators = [create_if_block_1, create_else_block];
  const if_blocks = [];
  function select_block_type(ctx2, dirty) {
    if (ctx2[0] !== null)
      return 0;
    return 1;
  }
  current_block_type_index = select_block_type(ctx, -1);
  if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
  const block = {
    c: function create() {
      if_block.c();
      if_block_anchor = empty();
    },
    m: function mount(target, anchor) {
      if_blocks[current_block_type_index].m(target, anchor);
      insert_dev(target, if_block_anchor, anchor);
      current = true;
    },
    p: function update(ctx2, dirty) {
      let previous_block_index = current_block_type_index;
      current_block_type_index = select_block_type(ctx2, dirty);
      if (current_block_type_index === previous_block_index) {
        if_blocks[current_block_type_index].p(ctx2, dirty);
      } else {
        group_outros();
        transition_out(if_blocks[previous_block_index], 1, 1, () => {
          if_blocks[previous_block_index] = null;
        });
        check_outros();
        if_block = if_blocks[current_block_type_index];
        if (!if_block) {
          if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx2);
          if_block.c();
        } else {
          if_block.p(ctx2, dirty);
        }
        transition_in(if_block, 1);
        if_block.m(if_block_anchor.parentNode, if_block_anchor);
      }
    },
    i: function intro(local) {
      if (current)
        return;
      transition_in(if_block);
      current = true;
    },
    o: function outro(local) {
      transition_out(if_block);
      current = false;
    },
    d: function destroy(detaching) {
      if_blocks[current_block_type_index].d(detaching);
      if (detaching)
        detach_dev(if_block_anchor);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_default_slot.name,
    type: "slot",
    source: "(99:1) <Router {primary}>",
    ctx
  });
  return block;
}
function create_fragment2(ctx) {
  let div0;
  let t0;
  let t1;
  let div1;
  let current;
  let div0_levels = [
    createMarkerProps(ctx[7]),
    { "data-svnav-route-start": ctx[5] }
  ];
  let div0_data = {};
  for (let i = 0; i < div0_levels.length; i += 1) {
    div0_data = assign(div0_data, div0_levels[i]);
  }
  let if_block = ctx[2] && create_if_block2(ctx);
  let div1_levels = [
    createMarkerProps(ctx[7]),
    { "data-svnav-route-end": ctx[5] }
  ];
  let div1_data = {};
  for (let i = 0; i < div1_levels.length; i += 1) {
    div1_data = assign(div1_data, div1_levels[i]);
  }
  const block = {
    c: function create() {
      div0 = element("div");
      t0 = space();
      if (if_block)
        if_block.c();
      t1 = space();
      div1 = element("div");
      set_attributes(div0, div0_data);
      add_location(div0, file2, 96, 0, 2760);
      set_attributes(div1, div1_data);
      add_location(div1, file2, 122, 0, 3462);
    },
    l: function claim(nodes) {
      throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    },
    m: function mount(target, anchor) {
      insert_dev(target, div0, anchor);
      insert_dev(target, t0, anchor);
      if (if_block)
        if_block.m(target, anchor);
      insert_dev(target, t1, anchor);
      insert_dev(target, div1, anchor);
      current = true;
    },
    p: function update(ctx2, [dirty]) {
      set_attributes(div0, div0_data = get_spread_update(div0_levels, [
        createMarkerProps(ctx2[7]),
        { "data-svnav-route-start": ctx2[5] }
      ]));
      if (ctx2[2]) {
        if (if_block) {
          if_block.p(ctx2, dirty);
          if (dirty & 4) {
            transition_in(if_block, 1);
          }
        } else {
          if_block = create_if_block2(ctx2);
          if_block.c();
          transition_in(if_block, 1);
          if_block.m(t1.parentNode, t1);
        }
      } else if (if_block) {
        group_outros();
        transition_out(if_block, 1, 1, () => {
          if_block = null;
        });
        check_outros();
      }
      set_attributes(div1, div1_data = get_spread_update(div1_levels, [
        createMarkerProps(ctx2[7]),
        { "data-svnav-route-end": ctx2[5] }
      ]));
    },
    i: function intro(local) {
      if (current)
        return;
      transition_in(if_block);
      current = true;
    },
    o: function outro(local) {
      transition_out(if_block);
      current = false;
    },
    d: function destroy(detaching) {
      if (detaching)
        detach_dev(div0);
      if (detaching)
        detach_dev(t0);
      if (if_block)
        if_block.d(detaching);
      if (detaching)
        detach_dev(t1);
      if (detaching)
        detach_dev(div1);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_fragment2.name,
    type: "component",
    source: "",
    ctx
  });
  return block;
}
var createId2 = createCounter();
function instance2($$self, $$props, $$invalidate) {
  let isActive;
  const omit_props_names = ["path", "component", "meta", "primary"];
  let $$restProps = compute_rest_props($$props, omit_props_names);
  let $activeRoute;
  let $location;
  let $parentBase;
  let $params;
  let { $$slots: slots = {}, $$scope } = $$props;
  validate_slots("Route", slots, ["default"]);
  let { path = "" } = $$props;
  let { component = null } = $$props;
  let { meta = {} } = $$props;
  let { primary = true } = $$props;
  usePreflightCheck(ROUTE_ID, $$props);
  const id = createId2();
  const { registerRoute, unregisterRoute, activeRoute, disableInlineStyles } = getContext(ROUTER);
  validate_store(activeRoute, "activeRoute");
  component_subscribe($$self, activeRoute, (value) => $$invalidate(16, $activeRoute = value));
  const parentBase = useRouteBase();
  validate_store(parentBase, "parentBase");
  component_subscribe($$self, parentBase, (value) => $$invalidate(17, $parentBase = value));
  const location = useLocation();
  validate_store(location, "location");
  component_subscribe($$self, location, (value) => $$invalidate(3, $location = value));
  const focusElement = writable(null);
  let ssrMatch;
  const route = writable();
  const params = writable({});
  validate_store(params, "params");
  component_subscribe($$self, params, (value) => $$invalidate(4, $params = value));
  setContext(ROUTE, route);
  setContext(ROUTE_PARAMS, params);
  setContext(FOCUS_ELEM, focusElement);
  const navigate2 = useNavigate();
  if (!isSSR) {
    onDestroy(() => unregisterRoute(id));
  }
  $$self.$$set = ($$new_props) => {
    $$invalidate(24, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
    $$invalidate(12, $$restProps = compute_rest_props($$props, omit_props_names));
    if ("path" in $$new_props)
      $$invalidate(13, path = $$new_props.path);
    if ("component" in $$new_props)
      $$invalidate(0, component = $$new_props.component);
    if ("meta" in $$new_props)
      $$invalidate(14, meta = $$new_props.meta);
    if ("primary" in $$new_props)
      $$invalidate(1, primary = $$new_props.primary);
    if ("$$scope" in $$new_props)
      $$invalidate(19, $$scope = $$new_props.$$scope);
  };
  $$self.$capture_state = () => ({
    createCounter,
    createMarkerProps,
    createId: createId2,
    getContext,
    onDestroy,
    setContext,
    writable,
    get: get_store_value,
    Router: Router_default,
    ROUTER,
    ROUTE,
    ROUTE_PARAMS,
    FOCUS_ELEM,
    useLocation,
    useNavigate,
    useRouteBase,
    usePreflightCheck,
    isSSR,
    extractBaseUri,
    join,
    ROUTE_ID,
    path,
    component,
    meta,
    primary,
    id,
    registerRoute,
    unregisterRoute,
    activeRoute,
    disableInlineStyles,
    parentBase,
    location,
    focusElement,
    ssrMatch,
    route,
    params,
    navigate: navigate2,
    isActive,
    $activeRoute,
    $location,
    $parentBase,
    $params
  });
  $$self.$inject_state = ($$new_props) => {
    $$invalidate(24, $$props = assign(assign({}, $$props), $$new_props));
    if ("path" in $$props)
      $$invalidate(13, path = $$new_props.path);
    if ("component" in $$props)
      $$invalidate(0, component = $$new_props.component);
    if ("meta" in $$props)
      $$invalidate(14, meta = $$new_props.meta);
    if ("primary" in $$props)
      $$invalidate(1, primary = $$new_props.primary);
    if ("ssrMatch" in $$props)
      $$invalidate(15, ssrMatch = $$new_props.ssrMatch);
    if ("isActive" in $$props)
      $$invalidate(2, isActive = $$new_props.isActive);
  };
  if ($$props && "$$inject" in $$props) {
    $$self.$inject_state($$props.$$inject);
  }
  $$self.$$.update = () => {
    if ($$self.$$.dirty & 155658) {
      $: {
        const isDefault = path === "";
        const rawBase = join($parentBase, path);
        const updatedRoute = {
          id,
          path,
          meta,
          default: isDefault,
          fullPath: isDefault ? "" : rawBase,
          base: isDefault ? $parentBase : extractBaseUri(rawBase, $location.pathname),
          primary,
          focusElement
        };
        route.set(updatedRoute);
        $$invalidate(15, ssrMatch = registerRoute(updatedRoute));
      }
    }
    if ($$self.$$.dirty & 98304) {
      $:
        $$invalidate(2, isActive = !!(ssrMatch || $activeRoute && $activeRoute.id === id));
    }
    if ($$self.$$.dirty & 98308) {
      $:
        if (isActive) {
          const { params: activeParams } = ssrMatch || $activeRoute;
          params.set(activeParams);
        }
    }
  };
  $$props = exclude_internal_props($$props);
  return [
    component,
    primary,
    isActive,
    $location,
    $params,
    id,
    activeRoute,
    disableInlineStyles,
    parentBase,
    location,
    params,
    navigate2,
    $$restProps,
    path,
    meta,
    ssrMatch,
    $activeRoute,
    $parentBase,
    slots,
    $$scope
  ];
}
var Route = class extends SvelteComponentDev {
  constructor(options) {
    super(options);
    init(this, options, instance2, create_fragment2, safe_not_equal, {
      path: 13,
      component: 0,
      meta: 14,
      primary: 1
    });
    dispatch_dev("SvelteRegisterComponent", {
      component: this,
      tagName: "Route",
      options,
      id: create_fragment2.name
    });
  }
  get path() {
    throw new Error("<Route>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set path(value) {
    throw new Error("<Route>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get component() {
    throw new Error("<Route>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set component(value) {
    throw new Error("<Route>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get meta() {
    throw new Error("<Route>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set meta(value) {
    throw new Error("<Route>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get primary() {
    throw new Error("<Route>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set primary(value) {
    throw new Error("<Route>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
};
var Route_default = Route;

// node_modules/svelte-navigator/src/Link.svelte
var file3 = "node_modules\\svelte-navigator\\src\\Link.svelte";
function create_fragment3(ctx) {
  let a;
  let current;
  let mounted;
  let dispose;
  const default_slot_template = ctx[13].default;
  const default_slot = create_slot(default_slot_template, ctx, ctx[12], null);
  let a_levels = [{ href: ctx[0] }, ctx[2], ctx[1]];
  let a_data = {};
  for (let i = 0; i < a_levels.length; i += 1) {
    a_data = assign(a_data, a_levels[i]);
  }
  const block = {
    c: function create() {
      a = element("a");
      if (default_slot)
        default_slot.c();
      set_attributes(a, a_data);
      add_location(a, file3, 65, 0, 1926);
    },
    l: function claim(nodes) {
      throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    },
    m: function mount(target, anchor) {
      insert_dev(target, a, anchor);
      if (default_slot) {
        default_slot.m(a, null);
      }
      current = true;
      if (!mounted) {
        dispose = listen_dev(a, "click", ctx[4], false, false, false);
        mounted = true;
      }
    },
    p: function update(ctx2, [dirty]) {
      if (default_slot) {
        if (default_slot.p && (!current || dirty & 4096)) {
          update_slot_base(
            default_slot,
            default_slot_template,
            ctx2,
            ctx2[12],
            !current ? get_all_dirty_from_scope(ctx2[12]) : get_slot_changes(default_slot_template, ctx2[12], dirty, null),
            null
          );
        }
      }
      set_attributes(a, a_data = get_spread_update(a_levels, [
        (!current || dirty & 1) && { href: ctx2[0] },
        dirty & 4 && ctx2[2],
        dirty & 2 && ctx2[1]
      ]));
    },
    i: function intro(local) {
      if (current)
        return;
      transition_in(default_slot, local);
      current = true;
    },
    o: function outro(local) {
      transition_out(default_slot, local);
      current = false;
    },
    d: function destroy(detaching) {
      if (detaching)
        detach_dev(a);
      if (default_slot)
        default_slot.d(detaching);
      mounted = false;
      dispose();
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_fragment3.name,
    type: "component",
    source: "",
    ctx
  });
  return block;
}
function instance3($$self, $$props, $$invalidate) {
  let href;
  let isPartiallyCurrent;
  let isCurrent;
  let isExactCurrent;
  let ariaCurrent;
  let props;
  const omit_props_names = ["to", "replace", "state", "getProps"];
  let $$restProps = compute_rest_props($$props, omit_props_names);
  let $location;
  let { $$slots: slots = {}, $$scope } = $$props;
  validate_slots("Link", slots, ["default"]);
  let { to } = $$props;
  let { replace = false } = $$props;
  let { state = {} } = $$props;
  let { getProps = null } = $$props;
  usePreflightCheck(LINK_ID, $$props);
  const location = useLocation();
  validate_store(location, "location");
  component_subscribe($$self, location, (value) => $$invalidate(11, $location = value));
  const dispatch = createEventDispatcher();
  const resolve2 = useResolve();
  const { navigate: navigate2 } = useHistory();
  function onClick(event) {
    dispatch("click", event);
    if (shouldNavigate(event)) {
      event.preventDefault();
      const shouldReplace = isExactCurrent || replace;
      navigate2(href, { state, replace: shouldReplace });
    }
  }
  $$self.$$.on_mount.push(function() {
    if (to === void 0 && !("to" in $$props || $$self.$$.bound[$$self.$$.props["to"]])) {
      console.warn("<Link> was created without expected prop 'to'");
    }
  });
  $$self.$$set = ($$new_props) => {
    $$invalidate(19, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
    $$invalidate(18, $$restProps = compute_rest_props($$props, omit_props_names));
    if ("to" in $$new_props)
      $$invalidate(5, to = $$new_props.to);
    if ("replace" in $$new_props)
      $$invalidate(6, replace = $$new_props.replace);
    if ("state" in $$new_props)
      $$invalidate(7, state = $$new_props.state);
    if ("getProps" in $$new_props)
      $$invalidate(8, getProps = $$new_props.getProps);
    if ("$$scope" in $$new_props)
      $$invalidate(12, $$scope = $$new_props.$$scope);
  };
  $$self.$capture_state = () => ({
    createEventDispatcher,
    useLocation,
    useResolve,
    useHistory,
    usePreflightCheck,
    shouldNavigate,
    isFunction,
    startsWith,
    LINK_ID,
    parsePath,
    stringifyPath,
    to,
    replace,
    state,
    getProps,
    location,
    dispatch,
    resolve: resolve2,
    navigate: navigate2,
    onClick,
    href,
    isExactCurrent,
    isCurrent,
    isPartiallyCurrent,
    props,
    ariaCurrent,
    $location
  });
  $$self.$inject_state = ($$new_props) => {
    $$invalidate(19, $$props = assign(assign({}, $$props), $$new_props));
    if ("to" in $$props)
      $$invalidate(5, to = $$new_props.to);
    if ("replace" in $$props)
      $$invalidate(6, replace = $$new_props.replace);
    if ("state" in $$props)
      $$invalidate(7, state = $$new_props.state);
    if ("getProps" in $$props)
      $$invalidate(8, getProps = $$new_props.getProps);
    if ("href" in $$props)
      $$invalidate(0, href = $$new_props.href);
    if ("isExactCurrent" in $$props)
      isExactCurrent = $$new_props.isExactCurrent;
    if ("isCurrent" in $$props)
      $$invalidate(9, isCurrent = $$new_props.isCurrent);
    if ("isPartiallyCurrent" in $$props)
      $$invalidate(10, isPartiallyCurrent = $$new_props.isPartiallyCurrent);
    if ("props" in $$props)
      $$invalidate(1, props = $$new_props.props);
    if ("ariaCurrent" in $$props)
      $$invalidate(2, ariaCurrent = $$new_props.ariaCurrent);
  };
  if ($$props && "$$inject" in $$props) {
    $$self.$inject_state($$props.$$inject);
  }
  $$self.$$.update = () => {
    if ($$self.$$.dirty & 2080) {
      $:
        $$invalidate(0, href = resolve2(to, $location));
    }
    if ($$self.$$.dirty & 2049) {
      $:
        $$invalidate(10, isPartiallyCurrent = startsWith($location.pathname, href));
    }
    if ($$self.$$.dirty & 2049) {
      $:
        $$invalidate(9, isCurrent = href === $location.pathname);
    }
    if ($$self.$$.dirty & 2049) {
      $:
        isExactCurrent = parsePath(href) === stringifyPath($location);
    }
    if ($$self.$$.dirty & 512) {
      $:
        $$invalidate(2, ariaCurrent = isCurrent ? { "aria-current": "page" } : {});
    }
    $:
      $$invalidate(1, props = (() => {
        if (isFunction(getProps)) {
          const dynamicProps = getProps({
            location: $location,
            href,
            isPartiallyCurrent,
            isCurrent
          });
          return { ...$$restProps, ...dynamicProps };
        }
        return $$restProps;
      })());
  };
  $$props = exclude_internal_props($$props);
  return [
    href,
    props,
    ariaCurrent,
    location,
    onClick,
    to,
    replace,
    state,
    getProps,
    isCurrent,
    isPartiallyCurrent,
    $location,
    $$scope,
    slots
  ];
}
var Link = class extends SvelteComponentDev {
  constructor(options) {
    super(options);
    init(this, options, instance3, create_fragment3, safe_not_equal, { to: 5, replace: 6, state: 7, getProps: 8 });
    dispatch_dev("SvelteRegisterComponent", {
      component: this,
      tagName: "Link",
      options,
      id: create_fragment3.name
    });
  }
  get to() {
    throw new Error("<Link>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set to(value) {
    throw new Error("<Link>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get replace() {
    throw new Error("<Link>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set replace(value) {
    throw new Error("<Link>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get state() {
    throw new Error("<Link>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set state(value) {
    throw new Error("<Link>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get getProps() {
    throw new Error("<Link>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set getProps(value) {
    throw new Error("<Link>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
};
var Link_default = Link;

// node_modules/svelte-navigator/src/actions.js
var createAction = (getAnchor) => (node, navigate2 = navigate) => {
  const handleClick = (event) => {
    const anchor = getAnchor(event);
    if (anchor && anchor.target === "" && shouldNavigate(event)) {
      event.preventDefault();
      const to = anchor.pathname + anchor.search + anchor.hash;
      navigate2(to, { replace: anchor.hasAttribute("replace") });
    }
  };
  const unlisten = addListener(node, "click", handleClick);
  return { destroy: unlisten };
};
var link = createAction((event) => event.currentTarget);
var links = createAction((event) => {
  const anchor = findClosest("A", event.target);
  if (anchor && isFunction(anchor.hasAttribute) && !anchor.hasAttribute("noroute")) {
    return anchor;
  }
  return null;
});
export {
  Link_default as Link,
  Route_default as Route,
  Router_default as Router,
  createHistory,
  createMemorySource,
  globalHistory,
  link,
  links,
  navigate,
  useFocus,
  useLocation,
  useMatch,
  useNavigate,
  useParams,
  useResolvable,
  useResolve
};
//# sourceMappingURL=svelte-navigator.js.map
